<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title><%= h @title %> at <%= h method(@conn) %> <%= h @conn.request_path %></title>
    <meta name="viewport" content="width=device-width">
    <style><%= normalize_css(assigns) %></style>
    <style><%= style_css(assigns) %></style>
    <style><%= PhoenixWithPrettyDebugger.Plug.PrettyDebugger.Highlighter.style("code") %></style>
</head>
<body>
    <div class="top-details">
        <%= if @style.logo do %>
        <aside class="exception-logo"></aside>
        <% end %>

        <header class="exception-info">
            <% [headline | details] = String.split(@message, "\n\n") %>
            <h5 class="struct">
                <%= h @title %>
                <small>at <%= h method(@conn) %></small>
                <small class="path"><%= h @conn.request_path %></small>
            </h5>
            <h1 class="title"><%= h headline %></h1>
            <%= for detail <- details do %>
            <p class="detail"><%= h detail %></p>
            <% end %>
        </header>

    <%= if @banner do %>
        </div>
        <div class="banner"><%= @banner %></div>
        <div class="top-details">
    <% end %>

        <div class="code-explorer">
            <div class="code-snippets">
                <%= for frame <- @frames do %>
                  <div class="frame-info" data-index="<%= frame.index %>" role="stack-trace-details">
                    <div class="file">
                        <a href="<%= frame.link %>"><%= h frame.file %></a>
                    </div>

                    <div class="file">
                        <div>
                            <% url = url_for_replaying_with_breakpoint(@conn_id, frame.mfa) %>
                            <% {m, f, a} = frame.mfa %>
                            <button onclick='setBreakpoint(<%= inspect(url) %>)'>
                                Set breakpoint for
                                <code><span class="code inline-code"><%= inspect m %>.<%= Atom.to_string f %>/<%= inspect a %></span></code>
                            </button>

                            <div id="demo"></div>
                        </div>
                    </div>

                    <%= if (snippet = frame.snippet) && snippet != [] do %>
<pre class="code code-block"><%= for {index, line, highlight} <- snippet do %><span class="line <%= if highlight, do: "-highlight" %>"><span class="ln"><%= h index %></span><span class="code"><%= line %></span></span>
<% end %></pre>
                    <% else %>
                    <div class="code code-block-empty">No code available.</div>
                    <% end %>

                    <div class="meta">
                        <div class="frame-mfa">
                            <%= h frame.info %>
                            <%= if doc = frame.doc do %>
                                <a class="docs right" href="<%= h doc %>">docs</a>
                            <% end %>
                            <%= if app = frame.app do %>
                                <span class="app right"><%= h app %></span>
                            <% end %>
                        </div>
                    </div>

                    <%= if frame.args do %>
                        <details class="meta" open>
                            <summary>Called with <%= length(frame.args) %> arguments</summary>
                            <ol class="code code-quote -padded">
                                <%= for arg <- frame.args do %>
                                    <li><%= arg %></li>
                                <% end %>
                            </ol>
                        </details>
                    <% end %>

                    <%= if frame.clauses do %>
                        <% {min, max, clauses} = frame.clauses %>
                        <details class="meta" open>
                            <summary>Attempted function clauses (showing <%= min %> out of <%= max %>)</summary>
                            <pre class="code code-block -padded">
                                <%= for clause <- clauses do %>
                                    <span class="line"><%= clause %></span>
                                <% end %>
                            </pre>
                        </details>
                    <% end %>
                </div>
                <% end %>
            </div>

            <div class="stack-trace">
                <div class="stack-trace-heading">
                    <label><input type="checkbox" role="show-all-toggle">Show only app frames</label>
                </div>

                <ul class="stack-trace-list -show-all" role="stack-trace-list">
                    <%= for frame <- @frames do %>
                    <li>
                        <button class="stack-trace-item -<%= frame.context %>" role="stack-trace-item" data-index="<%= frame.index %>">
                            <span class="left">
                                <%= if app = frame.app do %>
                                <span class="app"><%= h app %></span>
                                <% end %>

                                <span class="filename">
                                    <%= h frame.file %><%= if frame.line do %><span class="line">:<%= h frame.line %></span><% end %>
                                </span>
                            </span>

                            <span class="info"><%= h frame.info %></span>
                        </button>
                    </li>
                    <% end %>
                </ul>
            </div>
        </div>
    </div>

    <div class="conn-info">
        <%= if @params && @params != %{} do %>
        <details class="conn-details" open>
            <summary>Params</summary>
            <%= for {key, value} <- @params do %>
            <dl>
                <dt><%= h key %></dt>
                <dd><pre><%= h inspect(value) %></pre></dd>
            </dl>
            <% end %>
        </details>
        <% end %>

        <details class="conn-details">
            <summary>Request info</summary>

            <dl>
                <dt>URI:</dt>
                <dd class="code-quote"><%= h url(@conn) %></dd>
            </dl>

            <dl>
                <dt>Query string:</dt>
                <dd class="code-quote"><%= h @conn.query_string %></dd>
            </dl>
        </details>

        <details class="conn-details">
            <summary>Headers</summary>
            <%= for {key, value} <- Enum.sort(@conn.req_headers) do %>
            <dl>
                <dt><%= h key %></dt>
                <dd class="code-quote"><%= h value %></dd>
            </dl>
            <% end %>
        </details>

        <%= if @session && @session != %{} do %>
        <details class="conn-details">
            <summary>Session</summary>
            <%= for {key, value} <- @session do %>
            <dl>
                <dt><%= h key %></dt>
                <dd><pre><%= h inspect(value) %></pre></dd>
            </dl>
            <% end %>
        </details>
        <% end %>
    </div>

    <script>
        <%= PhoenixWithPrettyDebugger.Plug.PrettyDebugger.Highlighter.javascript() %>
    </script>

    <script>
        function setBreakpoint(url) {
            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                document.getElementById("demo").innerHTML = this.responseText;
                }
            };
            xhttp.open("GET", url, true);
            xhttp.send();
        }
    </script>

    <script>(function () {
        var $items = document.querySelectorAll('[role~="stack-trace-item"]')
        var $toggle = document.querySelector('[role~="show-all-toggle"]')
        var $list = document.querySelector('[role~="stack-trace-list"]')

        each($items, function ($item) {
            on($item, 'click', itemOnclick)
        })

        on($toggle, 'click', toggleOnclick)

        function toggleOnclick () {
            if (this.checked) {
                var $first = document.querySelector('[role~="stack-trace-item"].-app:first-of-type')
                if ($first) itemOnclick.call($first)
                removeClass($list, '-show-all')
            } else {
                addClass($list, '-show-all')
            }
        }

        function itemOnclick () {
            var idx = this.getAttribute('data-index')

            var $detail = document.querySelector('[role~="stack-trace-details"].-active')
            if ($detail) removeClass($detail, '-active')

            $detail = document.querySelector('[role~="stack-trace-details"][data-index="' + idx + '"]')
            if ($detail) addClass($detail, '-active')

            var $item = document.querySelector('[role~="stack-trace-item"].-active')
            if ($item) removeClass($item, '-active')

            $item = document.querySelector('[role~="stack-trace-item"][data-index="' + idx + '"]')
            if ($item) addClass($item, '-active')
        }

        var $first = document.querySelector('[role~="stack-trace-item"]:first-of-type')
        if ($first) itemOnclick.call($first)

        /*
         * Helpers
         */

        function each (list, fn) {
            for (var i = 0, len = list.length; i < len; i++) {
                var item = list[i]
                fn(item)
            }
        }

        function addClass (el, className) {
            if (el.classList) {
                el.classList.add(className)
            } else {
                el.className += ' ' + className
            }
        }

        function removeClass (el, className) {
            if (el.classList) {
                el.classList.remove(className)
            } else {
                var expr = new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi')
                el.className = el.className.replace(expr, ' ')
            }
        }

        function on (el, event, handler) {
            if (el.addEventListener) {
                el.addEventListener(event, handler)
            } else {
                el.attachEvent('on' + event, function () {
                    handler.call(el)
                })
            }
        }
    }())</script>
</body>
</html>
